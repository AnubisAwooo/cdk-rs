name: release-optimizer

on: push

env:
  rust-version: 1.60.0

jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
    steps:
      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: 0.3.4
          release_name: 0.3.4

  build-release:
    name: build-release
    needs: ["create-release"]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
            tar: gtar
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            tar: tar
          - os: windows-latest
            target: x86_64-pc-windows-msvc

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ env.rust-version }}
          target: ${{ matrix.target }}

      - name: Run builds
        run: |
          cargo build -p ic-cdk-optimizer --release --target ${{ matrix.target }}

      - name: Strip release binary (linux and macos)
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        run: |
          strip target/${{ matrix.target }}/release/ic-cdk-optimizer

      - name: Create archives
        shell: bash
        run: |
          staging="ic-cdk-optimizer-0.3.4-${{ matrix.target }}"
          mkdir -p "$staging"

          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp target/${{ matrix.target }}/release/ic-cdk-optimizer.exe "$staging/"
            7z a "$staging.zip" "$staging"
            echo "ASSET=$staging.zip" >> $GITHUB_ENV
          else
            cp target/${{ matrix.target }}/release/ic-cdk-optimizer "$staging/"
            tar czf "$staging.tar.gz" "$staging"
            echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload release archive
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.ASSET }}
          asset_name: ${{ env.ASSET }}
          asset_content_type: application/octet-stream
